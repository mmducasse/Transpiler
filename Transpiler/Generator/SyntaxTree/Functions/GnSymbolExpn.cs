using Transpiler.Analysis;

namespace Transpiler.Generate
{
    public record GnSymbolExpn(string Name,
                               bool NeedsInvoke,
                               bool IsAutoGenerated) : IGnFuncExpn, IGnPattern, IGnInlineNode
    {
        public static GnSymbolExpn Prepare(IScope scope, AzSymbolExpn symExpn)
        {
            bool needsInvoke = symExpn.Definition is not AzParam;
            bool isAutoGenerated = symExpn.Definition is AzParam param && param.IsAutoGenerated;
            return new(symExpn.Definition.Name, needsInvoke, isAutoGenerated);
        }

        public string Generate(int i, NameProvider names, ref string s)
        {
            return Generate();
        }

        public string Generate()
        {
            string name = IsAutoGenerated
                ? Name.SafeName()
                : Name.SafeNameGenerated();

            if (NeedsInvoke)
            {
                return name + "()";
            }
            return name;
        }
    }
}
