using System.Collections.Generic;
using Transpiler.Parse;

namespace Transpiler.Analysis
{
    public interface IAzFuncDefn : IAzDefn, IAzFuncNode
    {
        eFixity Fixity { get; }

        bool IsSolved { get; }
    }

    public interface IAzFuncStmtDefn : IAzFuncDefn
    {
        new IAzTypeExpn Type { get; set; }

        IAzFuncExpn Expression { get; }

        bool IsAutoGenerated { get; }

        bool InvokeImmediately { get; init; }

        IAzFuncStmtDefn SubstituteType(Substitution s);

        public static IReadOnlyList<IAzFuncStmtDefn> Initialize(Scope scope,
                                                                IPsFuncStmtDefn node)
        {
            return node switch
            {
                PsFuncDefn funcDefn => AzFuncDefn.Initialize(scope, funcDefn).ToArr(),
                PsDectorFuncDefn dectorFuncDefn => AzDectorFuncDefn.Initialize(scope, dectorFuncDefn),
                _ => throw new System.Exception(),
            };
        }

        public static IAzFuncDefn Analyze(Scope parentScope,
                                          NameProvider names,
                                          TvProvider tvs,
                                          IAzFuncStmtDefn funcDefn,
                                          IPsFuncStmtDefn node)
        {
            return (funcDefn, node) switch
            {
                (AzFuncDefn azFuncDefn, PsFuncDefn psFuncDefn) =>
                    AzFuncDefn.Analyze(parentScope, names, tvs, azFuncDefn, psFuncDefn),

                (AzDectorFuncDefn azDectorFuncDefn, PsDectorFuncDefn psDectorFuncDefn) =>
                    AzDectorFuncDefn.Analyze(parentScope, names, tvs, azDectorFuncDefn, psDectorFuncDefn),

                _ => throw new System.Exception(),
            };
        }
    }

}
