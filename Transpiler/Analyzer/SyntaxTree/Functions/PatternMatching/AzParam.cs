using System;
using System.Collections.Generic;
using Transpiler.Parse;

namespace Transpiler.Analysis
{
    public record AzParam(string Name,
                          bool IsAutoGenerated,
                          CodePosition Position) : IAzPattern, IAzFuncDefn
    {
        public IAzTypeExpn Type { get; private set; } = TypeVariables.Next;

        public eFixity Fixity => eFixity.Prefix;

        public bool IsSolved => false;

        public static AzParam Analyze(Scope scope,
                                      NameProvider _,
                                      PsParam node)
        {
            AzParam azParam = new(node.Name, false, node.Position);

            scope.FuncDefinitions[azParam.Name] = azParam;

            return azParam;
        }

        public ConstraintSet Constrain() => ConstraintSet.Empty;

        public void SubstituteType(Substitution s)
        {
            Type = Type.Substitute(s);
        }

        public void Recurse(Action<IAzFuncNode> action)
        {
            action(this);
        }

        public string Print(int i) => Name;

        public void PrintSignature()
        {
            throw new System.NotImplementedException();
        }

        public override string ToString() => Print(0);
    }
}
