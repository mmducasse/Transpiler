using System.Collections.Generic;
using Transpiler.Parse;

namespace Transpiler.Analysis
{
    public record AzParam(string Name,
                          bool IsAutoGenerated,
                          IAzTypeExpn Type,
                          CodePosition Position) : IAzPattern, IAzFuncDefn
    {
        public eFixity Fixity => eFixity.Prefix;

        public bool IsSolved => false;

        public static AzParam Analyze(Scope scope,
                                      NameProvider names,
                                      TvProvider tvs,
                                      PsParam node)
        {
            var azParam = new AzParam(node.Name, false, tvs.Next, node.Position);

            scope.FuncDefinitions[azParam.Name] = azParam;

            return azParam;
        }

        public ConstraintSet Constrain(TvProvider tvs, Scope  scope) => ConstraintSet.Empty;


        IAzPattern IAzPattern.SubstituteType(Substitution s) => SubstituteType(s);
        public AzParam SubstituteType(Substitution s)
        {
            return this with { Type = Type.Substitute(s) };
        }

        public IReadOnlyList<IAzFuncNode> GetSubnodes()
        {
            return this.ToArr();
        }

        public string Print(int i) => Name;

        public void PrintSignature()
        {
            throw new System.NotImplementedException();
        }

        public override string ToString() => Print(0);
    }
}
