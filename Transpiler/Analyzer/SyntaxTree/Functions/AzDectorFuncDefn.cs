using System.Collections.Generic;
using System.Linq;
using Transpiler.Parse;
using static Transpiler.UI;

namespace Transpiler.Analysis
{
    public class AzDectorFuncDefn : IAzFuncStmtDefn
    {
        public string ElementName { get; }

        public int ElementIndex { get; }

        public int NumElements { get; }

        public IAzTypeExpn Type { get; set; }

        public IAzFuncExpn Expression { get; set; }

        public eFixity Fixity => eFixity.Prefix;

        public bool IsAutoGenerated => false;

        public CodePosition Position { get; }

        public string Name => ElementName;

        public bool IsSolved { get; private set; }

        public bool InvokeImmediately { get; init; }

        public AzTypeTupleExpn TupleType { get; private set; }

        public AzDectorFuncDefn(string elementName,
                                int elementIndex,
                                int numElements,
                                CodePosition position)
        {
            ElementName = elementName;
            ElementIndex = elementIndex;
            NumElements = numElements;
            Position = position;
        }

        public static IReadOnlyList<IAzFuncStmtDefn> Initialize(Scope scope,
                                                                PsDectorFuncDefn node)
        {
            List<IAzFuncStmtDefn> dectorFuncDefns = new();
            int count = node.Elements.Count;
            for (int i = 0; i < count; i++)
            {
                string name = node.Elements[i];
                var funcDefn = new AzDectorFuncDefn(name, i, count, node.Position);
                scope.AddFunction(funcDefn);
                dectorFuncDefns.Add(funcDefn);
            }

            return dectorFuncDefns;
        }

        public static AzDectorFuncDefn Analyze(Scope parentScope,
                                               NameProvider names,
                                               TvProvider tvs,
                                               AzDectorFuncDefn funcDefn,
                                               PsDectorFuncDefn node)
        {
            var scope = new Scope(parentScope, "fn params");

            List<TypeVariable> elementTvs = new();
            for (int i = 0; i < funcDefn.NumElements; i++)
            {
                elementTvs.Add(tvs.Next);
            }

            funcDefn.Type = elementTvs[funcDefn.ElementIndex];
            funcDefn.TupleType = new AzTypeTupleExpn(elementTvs, CodePosition.Null);

            var expn = IAzFuncExpn.Analyze(scope, names, tvs, node.Expression);

            funcDefn.Expression = expn;

            return funcDefn;
        }

        public ConstraintSet Constrain(TvProvider provider, Scope scope)
        {
            var cse = Expression.Constrain(provider, scope);

            var ctup = new Constraint(TupleType, Expression.Type, Position);

            return IConstraintSet.Union(cse, ctup);
        }

        public IAzFuncStmtDefn SubstituteType(Substitution s)
        {
            Type = Type.Substitute(s);
            Expression = Expression.SubstituteType(s);
            IsSolved = true;
            return this;
        }

        public IReadOnlyList<IAzFuncNode> GetSubnodes()
        {
            return this.ToArr().Concat(Expression.GetSubnodes()).ToList();
        }

        public void PrintSignature()
        {
            Pr("{0} :: ", Name);
            PrLn(Type.PrintWithRefinements(), foregroundColor: Yellow);
        }

        public string Print(int i)
        {
            return string.Format("{0} = {1}", Name, Expression.Print(i + 1));
        }

        public override string ToString() => Print(0);
    }
}
